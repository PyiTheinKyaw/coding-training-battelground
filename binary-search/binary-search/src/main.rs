fn main() {
    // let nums = vec![-1,0,3,5,9,12];
    // let nums = vec![-998,-997,-995,-994,-991,-986,-984,-982,-981,-980,-978,-975,-973,-972,-970,-968,-967,-966,-962,-961,-960,-959,-958,-954,-953,-952,-950,-947,-946,-945,-944,-943,-942,-941,-939,-937,-936,-934,-931,-929,-928,-925,-924,-923,-922,-921,-918,-917,-916,-914,-912,-910,-909,-908,-905,-900,-897,-896,-895,-894,-893,-892,-891,-886,-882,-881,-880,-879,-878,-876,-873,-872,-871,-870,-864,-863,-860,-859,-857,-856,-853,-852,-851,-846,-844,-843,-841,-840,-835,-831,-829,-825,-822,-820,-819,-817,-815,-814,-812,-810,-808,-807,-804,-801,-800,-798,-797,-794,-793,-792,-790,-787,-786,-785,-782,-781,-778,-777,-776,-773,-772,-770,-767,-766,-763,-762,-759,-757,-751,-750,-748,-744,-743,-741,-740,-738,-737,-736,-733,-729,-727,-726,-725,-724,-723,-720,-718,-716,-715,-714,-710,-709,-703,-702,-701,-699,-698,-695,-694,-693,-690,-688,-686,-685,-682,-681,-680,-678,-674,-673,-672,-670,-668,-667,-666,-661,-657,-656,-655,-653,-651,-650,-646,-645,-644,-643,-642,-636,-635,-634,-633,-632,-631,-630,-629,-627,-626,-625,-624,-623,-622,-621,-618,-617,-616,-615,-614,-608,-606,-605,-603,-602,-597,-596,-595,-594,-590,-589,-581,-576,-574,-572,-568,-566,-565,-562,-557,-555,-554,-552,-551,-549,-547,-545,-544,-543,-537,-536,-533,-532,-530,-529,-526,-524,-517,-516,-515,-514,-513,-511,-509,-508,-502,-500,-498,-497,-493,-492,-491,-490,-487,-486,-485,-483,-479,-477,-476,-474,-472,-471,-469,-468,-465,-464,-463,-458,-457,-455,-453,-449,-444,-443,-442,-437,-433,-430,-429,-427,-426,-421,-419,-416,-415,-414,-413,-411,-409,-408,-406,-405,-404,-403,-402,-400,-398,-397,-393,-392,-389,-388,-387,-379,-376,-372,-370,-369,-367,-366,-364,-363,-361,-360,-359,-358,-357,-356,-351,-349,-348,-343,-339,-338,-334,-332,-330,-326,-323,-322,-321,-318,-315,-314,-313,-305,-304,-303,-302,-296,-295,-294,-293,-292,-291,-290,-289,-287,-286,-284,-282,-281,-279,-276,-274,-273,-272,-270,-268,-267,-266,-265,-264,-263,-261,-258,-257,-256,-255,-253,-252,-249,-245,-244,-241,-240,-239,-238,-237,-236,-235,-234,-233,-231,-230,-228,-224,-222,-221,-220,-219,-218,-217,-215,-212,-210,-209,-206,-204,-202,-201,-200,-199,-190,-184,-181,-178,-175,-174,-173,-171,-164,-163,-162,-159,-158,-157,-156,-150,-147,-145,-144,-141,-140,-138,-137,-136,-133,-131,-130,-128,-127,-125,-124,-122,-119,-118,-117,-116,-114,-113,-112,-111,-110,-107,-106,-103,-102,-99,-98,-94,-91,-88,-86,-85,-84,-80,-79,-78,-77,-76,-71,-70,-69,-67,-63,-62,-61,-59,-58,-57,-56,-53,-49,-48,-44,-43,-40,-35,-34,-32,-31,-30,-25,-21,-19,-17,-15,-11,-10,-9,-8,-5,-2,8,9,10,12,13,15,19,22,23,25,27,28,29,30,34,35,38,42,43,44,45,49,52,53,54,55,56,58,59,61,62,63,68,73,74,76,77,78,84,85,86,87,88,90,91,92,94,95,97,101,104,105,106,113,114,116,118,119,122,124,125,127,129,132,138,140,143,145,146,147,151,153,158,159,160,161,162,163,164,167,168,169,172,176,179,182,184,185,186,188,189,192,193,196,197,198,201,202,204,207,210,219,220,221,222,225,232,234,235,236,237,240,241,243,244,245,246,247,248,250,254,256,257,258,259,260,261,262,263,265,268,270,274,275,276,277,278,282,286,287,292,293,295,296,298,302,303,304,305,306,307,308,312,314,315,316,317,319,320,324,325,326,328,330,331,332,333,334,335,337,338,339,341,342,343,344,345,350,351,353,355,357,360,362,365,367,369,370,371,373,375,376,378,379,380,383,384,385,389,390,391,397,399,400,401,405,407,410,412,414,416,418,420,421,422,427,428,431,433,435,436,438,439,444,445,446,448,449,452,453,455,456,459,461,462,463,464,465,466,469,473,474,476,477,478,479,481,484,486,490,491,494,497,498,500,501,502,503,512,513,519,520,522,523,525,526,528,529,530,532,536,539,540,542,544,546,550,554,559,562,568,569,570,572,573,574,575,576,579,583,587,590,592,593,595,596,598,601,604,606,607,608,613,614,615,618,619,622,624,626,628,632,633,634,635,639,641,642,644,648,649,656,657,659,660,661,664,665,666,667,670,673,674,676,678,682,685,689,692,697,698,700,701,702,704,707,711,714,716,717,718,722,723,725,726,728,729,732,733,734,735,739,745,747,754,755,756,757,758,759,760,761,762,763,764,766,767,769,774,775,778,780,782,783,786,787,790,791,792,793,795,796,797,798,799,800,804,806,807,808,809,813,814,817,819,822,823,824,826,830,831,832,833,836,838,840,841,844,845,846,849,852,854,859,860,862,864,865,866,868,870,871,872,873,876,877,884,890,891,892,894,896,898,899,900,901,903,910,911,912,916,917,919,920,924,925,926,930,934,935,939,940,941,942,943,945,947,948,952,953,954,955,956,957,958,960,961,965,967,969,970,971,972,975,977,978,979,980,981,982,986,987,988,990,992,994,995,997];
    let nums = vec![-999,-998,-997,-995,-992,-990,-989,-985,-980,-979,-977,-968,-966,-965,-964,-962,-960,-959,-957,-956,-953,-952,-950,-946,-943,-942,-941,-939,-938,-934,-932,-928,-926,-925,-923,-922,-920,-918,-916,-912,-906,-902,-901,-900,-899,-897,-894,-892,-891,-890,-887,-884,-883,-882,-875,-874,-873,-871,-870,-867,-863,-862,-860,-859,-857,-856,-855,-854,-853,-849,-848,-847,-844,-842,-840,-839,-838,-836,-829,-828,-826,-825,-824,-822,-816,-812,-809,-804,-802,-801,-799,-797,-794,-793,-792,-791,-790,-786,-784,-783,-781,-780,-778,-776,-773,-770,-769,-768,-766,-765,-764,-762,-758,-757,-756,-754,-753,-752,-751,-750,-749,-745,-739,-737,-735,-730,-729,-726,-722,-721,-719,-717,-716,-715,-714,-711,-709,-708,-706,-703,-700,-699,-697,-692,-688,-685,-682,-681,-680,-679,-671,-670,-669,-668,-667,-666,-661,-660,-657,-648,-646,-644,-642,-637,-634,-633,-631,-623,-618,-615,-613,-612,-609,-605,-604,-603,-601,-596,-595,-592,-590,-589,-587,-586,-584,-582,-581,-580,-579,-576,-571,-570,-565,-563,-561,-559,-556,-550,-548,-547,-544,-541,-540,-538,-537,-535,-534,-532,-530,-527,-526,-524,-523,-519,-516,-515,-514,-512,-511,-510,-508,-507,-506,-503,-502,-499,-498,-496,-491,-488,-487,-486,-485,-484,-480,-478,-474,-473,-467,-465,-462,-460,-457,-456,-453,-452,-450,-449,-447,-443,-441,-440,-438,-437,-436,-435,-434,-433,-431,-430,-428,-424,-423,-422,-419,-417,-416,-414,-413,-410,-407,-406,-404,-403,-401,-400,-398,-396,-394,-393,-390,-388,-386,-385,-381,-380,-378,-376,-375,-374,-373,-372,-369,-368,-367,-362,-360,-359,-357,-352,-349,-348,-347,-346,-342,-340,-339,-337,-336,-328,-327,-325,-324,-323,-322,-319,-318,-317,-315,-313,-310,-309,-307,-306,-304,-302,-301,-300,-298,-293,-292,-289,-288,-286,-283,-282,-278,-276,-275,-273,-272,-271,-269,-267,-266,-263,-260,-259,-258,-256,-254,-253,-252,-251,-250,-246,-240,-239,-236,-235,-234,-233,-232,-231,-230,-228,-227,-224,-221,-220,-217,-215,-214,-212,-211,-205,-204,-203,-198,-195,-193,-192,-191,-187,-185,-183,-178,-177,-174,-172,-167,-166,-164,-162,-158,-156,-149,-147,-145,-141,-140,-139,-136,-134,-133,-129,-127,-123,-121,-120,-119,-117,-115,-114,-112,-110,-106,-104,-100,-95,-93,-92,-91,-90,-89,-88,-87,-86,-85,-84,-80,-75,-72,-71,-67,-66,-65,-63,-59,-46,-45,-43,-42,-41,-40,-35,-33,-32,-28,-24,-23,-22,-21,-18,-17,-12,-10,-8,-6,-3,-1,1,2,3,4,5,7,9,12,17,18,19,20,21,23,24,26,27,28,32,33,35,36,37,39,40,41,42,44,45,50,51,53,54,56,57,59,61,62,64,65,66,67,70,71,73,76,80,83,85,88,90,91,94,95,96,97,99,100,102,103,105,106,107,108,109,111,112,113,114,116,117,119,121,122,123,124,126,133,134,137,138,139,140,142,143,145,146,149,150,154,155,157,158,160,162,163,164,165,166,172,175,178,179,181,182,185,186,187,191,192,193,194,195,196,198,200,201,203,204,205,206,207,209,211,212,213,214,215,217,218,219,220,221,222,223,225,226,227,228,229,230,235,236,237,238,240,243,244,245,248,255,258,259,261,262,264,266,267,268,270,271,272,273,275,276,277,279,281,284,289,295,297,298,300,301,304,305,306,307,314,317,320,326,327,328,329,331,335,336,337,338,340,341,342,344,350,356,357,359,365,366,367,369,372,374,375,376,377,380,383,384,387,388,389,390,393,394,396,399,401,405,406,408,409,411,415,417,420,423,424,425,427,428,429,430,431,433,436,438,441,443,446,448,449,450,453,455,456,458,460,461,462,463,469,471,472,475,476,477,478,479,480,484,485,488,491,494,496,497,500,504,505,507,509,511,513,514,515,516,518,519,520,521,522,523,524,527,528,529,531,535,536,537,539,540,541,542,544,546,547,549,550,551,552,553,554,556,557,558,559,561,562,563,569,571,574,575,578,582,583,585,586,587,596,597,598,600,601,603,605,608,611,612,613,616,617,618,619,620,623,629,630,632,634,635,638,639,640,641,642,643,644,646,651,652,656,661,663,664,667,668,670,676,677,680,681,682,684,685,688,689,691,692,693,694,695,696,698,700,701,703,704,705,706,709,711,714,715,716,717,718,719,720,722,723,725,726,727,735,736,737,739,741,742,744,746,747,748,750,752,753,758,767,768,771,772,773,774,775,781,782,784,785,786,787,788,790,791,795,796,797,799,801,803,804,805,810,811,812,813,818,819,822,824,825,828,829,831,832,835,837,838,839,842,843,845,846,847,850,853,854,855,856,857,859,862,863,864,865,866,871,872,874,875,876,879,880,883,885,886,890,891,892,893,894,895,896,897,901,902,903,906,908,910,911,914,919,920,921,922,924,927,929,931,935,938,941,942,943,944,945,946,948,950,951,952,953,954,956,957,959,962,964,967,968,969,973,975,977,979,980,982,983,988,989,990,994,995,998];
    let result = search(nums, -571);

    println!("result: {:?}", result);
}


pub fn search(nums: Vec<i32>, target: i32) -> i32 {
    if !(1 <= nums.len() && nums.len() <= 10i32.pow(4) as usize) { return -1 }
    if !(target < 10i32.pow(4)) {return -1 }

    let mut left = 0;
    let mut right = nums.len();

    while left < right {

        let mid = (right - left) / 2 + left;

        if !(nums[mid] > -10i32.pow(4)) { return -1 }

        if target == nums[mid] {
            return mid as i32;
        } else if target > nums[mid] {
            left = mid + 1;
        } else {
            right = mid;
        }
    }

    -1
}

pub fn optimized_search(nums: Vec<i32>, target: i32) -> i32 {
    use std::cmp::Ordering;
    let (mut low, mut high) = (0, nums.len());
    while low < high {
        let mid = low + (high - low) / 2;
        match nums[mid].cmp(&target) {
            Ordering::Equal => return mid as i32,
            Ordering::Less => low = mid + 1,
            Ordering::Greater => high = mid,
        }
    }
    -1
}